#include "StdAfx.h"
#include "Game/Game.h"
#include "Managers/UIManager/UIObject.h"
#include "GSMenuOption.h"
#include "GSTested_State.h"

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StateName
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char *GSMenuOption::getStateName() const
{
	return "GSMenuOption";
}
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GSMenuOption::GSMenuOption()
{
	Logs::info ( "GSMenuOption\n" );
	m_isGame = Game::getInstance();
	m_isEventManager = & ( EventManager::getInstance() );
	m_isStateMachine = & ( StateMachine::getInstance() );
	m_UIObject=0;
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GSMenuOption::~GSMenuOption()
{
	Logs::info ( "~GSMenuOption\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State CTOR (when added to the StateMachine stack)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSMenuOption::ctor	( const StateMachine *sm )
{
	Logs::info ( "State GSMenuOption::ctor\n" );
	m_isEventManager->attach ( Events::IRRLICHT_EVENT, this );
	m_isEventManager->attach ( Events::GAME_SWF_EVENT, this );
	//m_UIObject=m_isGame->getUIManager()->CreateUIObject ( "data/swf/GSMenuOption.swf" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State DTOR (when removed from the StateMachine stack)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSMenuOption::dtor	( const StateMachine *sm )
{
	Logs::info ( "State GSMenuOption::dtor\n" );
	m_isEventManager->detach ( Events::IRRLICHT_EVENT, this );
	m_isEventManager->detach ( Events::GAME_SWF_EVENT, this );

	if ( m_UIObject )
	{
		m_isGame->getUIManager()->ReleaseUIObject ( m_UIObject );
		m_UIObject=0;
	}
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State update (game update: update)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSMenuOption::update ( StateMachine *sm )
{
	Logs::debug ( "State GSMenuOption::update\n" );
	m_isStateMachine->loadState<GSTested_State>();
	m_isStateMachine->popState();
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State pause (when a new state is added atop)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSMenuOption::pause	( const StateMachine *sm )
{
	Logs::info ( "State GSMenuOption::pause\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State resume (when the state above is removed)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSMenuOption::resume	( const StateMachine *sm )
{
	Logs::info ( "State GSMenuOption::resume\n" );
}


// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State draw (game update: draw)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSMenuOption::draw	( const StateMachine *sm )
{
	Logs::debug ( "State GSMenuOption::draw\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State draw2d (draw 2d elements in front)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSMenuOption::draw2d	( const StateMachine *sm )
{
	Logs::debug ( "State GSMenuOption::draw2d\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State sleep (application is interrupted)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSMenuOption::sleep	( const StateMachine *sm )
{
	Logs::info ( "State GSMenuOption::sleep\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State wakeup (application is resumed)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSMenuOption::wakeup	( const StateMachine *sm )
{
	Logs::info ( "State GSMenuOption::wakeup\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Configuration state (If this option is true the state Update and Draw(draw2d) regardless of pause)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
bool GSMenuOption::isWorkingInParallel()
{
return true;
}
*/

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Configuration state (If this option is true the state Loding screen Disable. )
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
bool GSMenuOption::isLoadingDisable()
{
return true;
}
*/


// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EReceiver
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void	GSMenuOption::onEvent ( const EEvent *ev, const EventManager *evMgr )
{
	Logs::debug ( "State GSMenuOption onEvent\n" );

	switch ( ev->getEventID() )
	{
		case Events::IRRLICHT_EVENT:
			Logs::debug ( "IRRLICHT_EVENT onEvent\n" );
			break;

		case Events::GAME_SWF_EVENT:
			Logs::info ( "GAME_SWF_EVENT onEvent\n" );
			break;
	}
}



