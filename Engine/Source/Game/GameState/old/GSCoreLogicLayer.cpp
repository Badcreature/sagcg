#include "StdAfx.h"
#include "Game/Game.h"
#include "GSCoreLogicLayer.h"

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GSCoreLogicLayer::GSCoreLogicLayer()
{
	Logs::debug ( "GSCoreLogicLayer\n" );
	m_isGame = Game::getInstance();
	m_isEventManager = & ( EventManager::getInstance() );
	m_isStateMachine = & ( StateMachine::getInstance() );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GSCoreLogicLayer::~GSCoreLogicLayer()
{
	Logs::debug ( "~GSCoreLogicLayer\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State CTOR (when added to the StateMachine stack)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSCoreLogicLayer::ctor	( const StateMachine *sm )
{
	Logs::debug ( "State GSCoreLogicLayer::ctor\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State DTOR (when removed from the StateMachine stack)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSCoreLogicLayer::dtor	( const StateMachine *sm )
{
	Logs::debug ( "State GSCoreLogicLayer::dtor\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State update (game update: update)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSCoreLogicLayer::update ( StateMachine *sm )
{
	Logs::debug ( "State GSCoreLogicLayer::update\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State pause (when a new state is added atop)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSCoreLogicLayer::pause	( const StateMachine *sm )
{
	Logs::debug ( "State GSCoreLogicLayer::pause\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State resume (when the state above is removed)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSCoreLogicLayer::resume	( const StateMachine *sm )
{
	Logs::debug ( "State GSCoreLogicLayer::resume\n" );
}


// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State draw (game update: draw)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSCoreLogicLayer::draw	( const StateMachine *sm )
{
	Logs::debug ( "State GSCoreLogicLayer::draw\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State draw2d (draw 2d elements in front)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSCoreLogicLayer::draw2d	( const StateMachine *sm )
{
	Logs::debug ( "State GSCoreLogicLayer::draw2d\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State sleep (application is interrupted)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSCoreLogicLayer::sleep	( const StateMachine *sm )
{
	Logs::debug ( "State GSCoreLogicLayer::sleep\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State wakeup (application is resumed)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSCoreLogicLayer::wakeup	( const StateMachine *sm )
{
	Logs::debug ( "State GSCoreLogicLayer::wakeup\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Configuration state (If this option is true the state Update and Draw(draw2d) regardless of pause)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
bool GSCoreLogicLayer::isWorkingInParallel()
{
return true;
}
*/

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Configuration state (If this option is true the state Loding screen Disable. )
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
bool GSCoreLogicLayer::isLoadingDisable()
{
return true;
}
*/


// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EReceiver
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void	GSCoreLogicLayer::onEvent ( const EEvent *ev, const EventManager *evMgr )
{
	Logs::debug ( "State GSCoreLogicLayer onEvent\n" );
}



