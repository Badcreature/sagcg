#include "StdAfx.h"
#include "Game/Game.h"
#include "GSControlHandlers.h"
#include "Managers/UIManager/UIObject.h"

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GSControlHandlers::GSControlHandlers()
{
	Logs::debug ( "GSControlHandlers\n" );
	m_isGame = Game::getInstance();
	m_isEventManager = & ( EventManager::getInstance() );
	m_isStateMachine = & ( StateMachine::getInstance() );
	m_ControlSWF=0;
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GSControlHandlers::~GSControlHandlers()
{
	Logs::debug ( "~GSControlHandlers\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State CTOR (when added to the StateMachine stack)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSControlHandlers::ctor	( const StateMachine *sm )
{
	Logs::debug ( "State GSControlHandlers::ctor\n" );
	m_ControlSWF=m_isGame->getUIManager()->CreateUIObject ( "data/swf/Controls.swf" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State DTOR (when removed from the StateMachine stack)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSControlHandlers::dtor	( const StateMachine *sm )
{
	Logs::debug ( "State GSControlHandlers::dtor\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State update (game update: update)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSControlHandlers::update ( StateMachine *sm )
{
	Logs::debug ( "State GSControlHandlers::update\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State pause (when a new state is added atop)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSControlHandlers::pause	( const StateMachine *sm )
{
	Logs::debug ( "State GSControlHandlers::pause\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State resume (when the state above is removed)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSControlHandlers::resume	( const StateMachine *sm )
{
	Logs::debug ( "State GSControlHandlers::resume\n" );
}


// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State draw (game update: draw)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSControlHandlers::draw	( const StateMachine *sm )
{
	Logs::debug ( "State GSControlHandlers::draw\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State draw2d (draw 2d elements in front)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSControlHandlers::draw2d	( const StateMachine *sm )
{
	Logs::debug ( "State GSControlHandlers::draw2d\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State sleep (application is interrupted)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSControlHandlers::sleep	( const StateMachine *sm )
{
	Logs::debug ( "State GSControlHandlers::sleep\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// State wakeup (application is resumed)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GSControlHandlers::wakeup	( const StateMachine *sm )
{
	Logs::debug ( "State GSControlHandlers::wakeup\n" );
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Configuration state (If this option is true the state Update and Draw(draw2d) regardless of pause)
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
bool GSControlHandlers::isWorkingInParallel()
{
return true;
}
*/

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Configuration state (If this option is true the state Loding screen Disable. )
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
bool GSControlHandlers::isLoadingDisable()
{
return true;
}
*/


// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EReceiver
// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void	GSControlHandlers::onEvent ( const EEvent *ev, const EventManager *evMgr )
{
	Logs::debug ( "State GSControlHandlers onEvent\n" );
}



